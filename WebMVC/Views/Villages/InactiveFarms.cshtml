@using Core.Features.GetInactiveFarms

@inject IMediator mediator
@inject DataService dataService

@model InactiveFarmParameters

@{
    ViewData["Title"] = "Inactive farms";
}

@using (Html.BeginForm(nameof(VillagesController.InactiveFarms), "Villages", FormMethod.Post))
{
    <div class="container">
        @await Html.PartialAsync("_ServerPickerPartial")

        @Html.EditorForModel()
        
        <input type="submit" id="Check" class="btn btn-primary mt-2" value="Check" />
    </div>
}

@{
    var dates = Enumerable.Range(0, 6).Select(x => DateTime.Now.AddDays(-x)).ToList();
    IPagedList<InactiveFarmDto>? dto = null;
}
@if (ViewData.ModelState.IsValid)
{
    dto = await mediator.Send(new GetInactiveFarmsQuery(Model));            
}
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameForInnerType((InactiveFarmDto village) => village.Distance)
            </th>
            <th>
                @Html.DisplayNameForInnerType((InactiveFarmDto village) => village.Player)
            </th>
            <th>
                @Html.DisplayNameForInnerType((InactiveFarmDto village) => village.Village)
            </th>
            @for (var i = 0; i < dates.Count; i++)
            {
                <th>
                    @dates[i].ToString("dd/MM")
                </th>
            }
        </tr>
    </thead>
    @if (dto is not null)
    {       
        <tbody>            
            @foreach (var value in dto)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(m => value.Distance)
                    </td>
                    <td>
                        @Html.DisplayFor(m => value.Player)
                    </td>
                    <td>
                        @Html.DisplayFor(m => value.Village)
                    </td>
                    @for (var pos = 0; pos < dates.Count; pos++)
                    {
                        <td>
                            @if (pos >= value.Populations.Count)
                            {
                                <p>~</p>
                            }
                            else
                            {
                                <p>
                                    @Html.DisplayFor(m => value.Populations[pos])
                                </p>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    }
</table>


@await Html.PartialAsync("_PaginationPartial", dto)
