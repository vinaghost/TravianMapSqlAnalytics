@    using Core.Features.GetInactiveFarms

@inject IMediator mediator
@inject DataService dataService

@model IPagedList<InactiveFarmDto>

@{
    ViewData["Title"] = "Inactive farms";
    var parameters = new InactiveFarmParameters();
}

@using (Html.BeginForm(nameof(VillagesController.InactiveFarms), "Villages", FormMethod.Post))
{
    <div class="container">
        @await Html.PartialAsync("_ServerPickerPartial")

        @Html.EditorFor(m => parameters.X)
        @Html.EditorFor(m => parameters.Y)

        @Html.EditorFor(m => parameters.Date)

        <div class="mt-3">
            <a href="#" class="link-primary" data-bs-toggle="collapse" data-bs-target="#filter-fields">
                Advanced filters
            </a>

        </div>
        <div class="collapse" id="filter-fields">
            @Html.EditorFor(m => parameters.MinDistance)
            @Html.EditorFor(m => parameters.MaxDistance)

            @Html.EditorFor(m => parameters.MinPlayerPopulation)
            @Html.EditorFor(m => parameters.MaxPlayerPopulation)

            @Html.EditorFor(m => parameters.MinVillagePopulation)
            @Html.EditorFor(m => parameters.MaxVillagePopulation)
        </div>

        <div>
            @Html.HiddenFor(m => m.PageNumber)
            @Html.HiddenFor(m => m.PageSize)
        </div>
        <input type="submit" id="Check" class="btn btn-primary mt-2" value="Check" />
    </div>
}

@{
    var dates = Enumerable.Range(0, 6).Select(x => DateTime.Now.AddDays(-x)).ToList();
}

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameForInnerType((InactiveFarmDto village) => village.Distance)
            </th>
            <th>
                @Html.DisplayNameForInnerType((InactiveFarmDto village) => village.Player)
            </th>
            <th>
                @Html.DisplayNameForInnerType((InactiveFarmDto village) => village.Village)
            </th>
            @for (var i = 0; i < dates.Count; i++)
            {
                <th>
                    @dates[i].ToString("dd/MM")
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var value in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(m => value.Distance)
                </td>
                <td>
                    @Html.DisplayFor(m => value.Player)
                </td>
                <td>
                    @Html.DisplayFor(m => value.Village)
                </td>
                @for (var pos = 0; pos < dates.Count; pos++)
                {
                    <td>
                        @if (pos >= value.Populations.Count)
                        {
                            <p>~</p>
                        }
                        else
                        {
                            <p>
                                @Html.DisplayFor(m => value.Populations[pos])
                            </p>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@await Html.PartialAsync("_PaginationPartial", Model)
