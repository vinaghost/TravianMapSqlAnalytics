@using Features.GetInactiveFarms
@using WebMVC.ViewModels.Villages

@inject IMediator mediator
@inject DataService dataService

@model InactiveFarmViewModel

@{
    ViewData["Title"] = "Inactive farms";
}

@using (Html.BeginForm(nameof(VillagesController.InactiveFarms), "Villages", FormMethod.Post))
{
    <div class="container">
        @await Html.PartialAsync("_ServerPickerPartial" )

        @await Component.InvokeAsync(nameof(DistanceFilterParameters), new { parameter = Model.Parameters })

        <div class="mt-3">
            <a href="#" class="link-primary" data-bs-toggle="collapse" data-bs-target="#filter-fields">
                Advanced filters
            </a>

        </div>
        <div class="collapse" id="filter-fields">
            @Html.EditorFor(m => m.Parameters.InactiveDays, new { id = nameof(InactiveFarmParameters.InactiveDays) })
            @await Component.InvokeAsync(nameof(VillageFilterParameters), new { parameter = Model.Parameters })
            @await Component.InvokeAsync(nameof(PlayerFilterParameters), new { parameter = Model.Parameters })

        </div>

        <div>
            @await Component.InvokeAsync(nameof(PaginationParameters), new { parameter = Model.Parameters })
            @Html.Hidden(nameof(WebParameters.IsUserInput), "true")
        </div>
        
        <input type="submit" id="Check" class="btn btn-primary mt-2" value="Check inactive" />
    </div>
}

@{
    var dates = Enumerable.Range(0, Constants.DateAmount).Select(x => DateTime.Now.AddDays(-x)).ToList();
}
@if (!Model.Parameters.IsUserInput)
{
    <div class="text-center">
        <p>Enter your request and check!</p>
    </div>
}
else 
{
    <div class="text-center">
        <p>We found <b>@(Model.Data?.TotalItemCount ?? 0) villages</b> fit your request</p>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameForInnerType((VillageDataDto village) => village.Distance)
            </th>
            <th>
                @Html.DisplayNameForInnerType((VillageDataDto village) => village.Player)
            </th>
            <th>
                @Html.DisplayNameForInnerType((VillageDataDto village) => village.Village)
            </th>
            @for (var i = 0; i < dates.Count; i++)
            {
                <th>
                    @dates[i].ToString("dd/MM")
                </th>
            }
        </tr>
    </thead>
    <tbody>  
        @Html.DisplayFor(x => x.Data)
    </tbody>
</table>


@await Html.PartialAsync("_PaginationPartial", Model.Data)
