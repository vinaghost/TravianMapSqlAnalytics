@using Features.GetInactiveFarms
@using Features.SearchAlliance
@using Features.SearchPlayer

@inject IMediator mediator

@model InactiveFarmParameters


<div>
    @Html.EditorFor(m => m.X)
    @Html.EditorFor(m => m.Y)
</div>

<div class="mt-3">
    <a href="#" class="link-primary" data-bs-toggle="collapse" data-bs-target="#filter-fields">
        Advanced filters
    </a>

</div>
<div class="collapse" id="filter-fields">
    @Html.EditorFor(m => m.Distance)

    @Html.EditorFor(m => m.Tribe)
    @Html.EditorFor(m => m.Capital)

    @{
        var alliances = await mediator.Send(new SearchAllianceByIdQuery(Model.Alliances));
        var excludeAlliances = await mediator.Send(new SearchAllianceByIdQuery(Model.ExcludeAlliances));
    }
    @Html.EditorFor(m => m.Alliances, "ListInt", "", new { Name = nameof(Model.Alliances), Url = "/alliances/search", Data = alliances })

    @Html.EditorFor(m => m.ExcludeAlliances, "ListInt", "", new { Name = nameof(Model.ExcludeAlliances), Url = "/alliances/search", Data = excludeAlliances })

    @Html.EditorFor(m => m.MinPlayerPopulation)
    @Html.EditorFor(m => m.MaxPlayerPopulation)

    @Html.EditorFor(m => m.MinVillagePopulation)
    @Html.EditorFor(m => m.MaxVillagePopulation)
</div>

<div>
    @Html.HiddenFor(m => m.PageNumber)
    @Html.HiddenFor(m => m.PageSize)
    @Html.HiddenFor(m => m.IsUserInput)
</div>