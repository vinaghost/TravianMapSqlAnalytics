@using Core.Models
@using Core.Parameters
@using Core.Queries
@using Core.Services
@using MediatR
@using WebMVC.Controllers
@using X.PagedList.Mvc.Bootstrap4.Core
@using X.PagedList.Mvc.Core

@inject IMediator mediator
@inject DataService dataService

@model PlayerParameters
@{
    ViewData["Title"] = "Players";
}


@using (Html.BeginForm(nameof(PlayersController.Index), "Players", FormMethod.Post))
{ 
    <table>
        <tr>
            <td>@Html.DisplayNameFor(m => m.Alliances)</td>
            <td><input id="AllianceInput" type="text" value="@string.Join(',', Model.Alliances)" /> (Id of alliances, separated with ",")</td>
        </tr>
        <tr>
            <td>@Html.DisplayNameFor(m => m.Players)</td>
            <td><input id="PlayerInput" type="text" value="@string.Join(',', Model.Players)" /> (Id of players, separated with ",")</td>
        </tr>
        <tr>
            <td>@Html.HiddenFor(m => m.Alliances)</td>
            <td>@Html.HiddenFor(m => m.Players)</td>
            <td>@Html.HiddenFor(m => m.PageNumber)</td>
            <td>@Html.HiddenFor(m => m.PageSize)</td>
        </tr>
        <tr><td colspan="2"><input type="submit" id="Check" class="btn btn-primary" value="Check" /></td>
            
        </tr>
    </table>
}

@{
    var players = await mediator.Send(new GetPlayersQuery(Model));
}
<div class="text-center">
    <p>Your current server is @dataService.Server</p>
    <p>We found <b>@players.TotalItemCount players</b> fit your request</p>
</div>


<table class="table">
    <thead>
        <tr>
            <th>
                ~
            </th>
            <th>
                @Html.DisplayNameForInnerType((Player player) => player.PlayerName)
            </th>
            <th>
                @Html.DisplayNameForInnerType((Player player) => player.AllianceName)
            </th>
            <th>
                @Html.DisplayNameForInnerType((Player player) => player.VillageCount)
            </th>
            <th>
                @Html.DisplayNameForInnerType((Player player) => player.Population)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var (value, i) in players.Select((value, i) => (value, i)))
        {
            <tr>
                <td>
                    @(players.PageSize*(players.PageNumber - 1) + i + 1)
                </td>
                <td>
                    <a href="https://@dataService.Server/profile/@value.PlayerId" target="_blank">@Html.DisplayFor(m => value.PlayerName)</a>
                </td>
                <td>
                        <a href="https://@dataService.Server/alliance/@value.AllianceId" target="_blank">@Html.DisplayFor(m => value.AllianceName)</a>
                </td>
                <td>
                    @Html.DisplayFor(m => value.VillageCount)
                </td>
                <td>
                    @Html.DisplayFor(m => value.Population)
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="container" class="text-center">
    <div>
        Page @(players.PageCount < players.PageNumber ? 0 : players.PageNumber) / @players.PageCount
    </div>
    <br />
    <div class="pagination" style="display:grid; place-items:center;">
        <div>
            @Html.PagedListPager(players, page =>
            {
                Model.PageNumber = page;
                return $"{Model.PageNumber}_{Model.PageSize}";
            }, Bootstrap4PagedListRenderOptions.ClassicPlusFirstAndLast)
        </div>
    </div>
</div>

@section Scripts {
        <script src="~/js/pagination.js"></script>
        <script src="~/js/string_to_list_submit.js"></script>
}