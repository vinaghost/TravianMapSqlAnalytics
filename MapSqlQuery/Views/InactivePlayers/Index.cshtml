@using MapSqlQuery.Models.Output;
@using MapSqlQuery.Models.View;
@using X.PagedList.Mvc.Bootstrap4.Core;
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@model InactivePlayerViewModel

@{
    ViewData["Title"] = "Inactive Players";
}
<h1>@ViewData["Title"]</h1>

@using (Html.BeginForm("Index", "InactivePlayers", FormMethod.Post))
{ 
    <table>
        <tr>
            <td>Enter Days: </td>
            <td>@Html.TextBoxFor(m => m.Input.Days, new {@type = "number"})</td>
        </tr>
        <tr>
            <td colspan="2"><input type="submit" value="Find" /></td>
        </tr>
    </table>
}
<p>Found @Model.PlayerTotal inactive players of server @Model.Server </p>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Profile
                </th>
                <th>
                    @Html.DisplayNameForInnerType((PlayerPopulation model) => model.PlayerName)
                </th>
                <th>
                    @Html.DisplayNameForInnerType((PlayerPopulation model)  => model.AllianceName)
                </th>
                <th>
                    @Html.DisplayNameForInnerType((PlayerPopulation model)  => model.Tribe)
                </th>
                <th>
                    @Html.DisplayNameForInnerType((PlayerPopulation model)  => model.VillageCount)
                </th>
                @for (var i = 0; i < Model.Dates.Count ; i++)
                {
                    <th>
                        @Model.Dates[i].ToString("dd/MM/yyyy")
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var player in Model.Players)
            {
                <tr>
                    <td>
                        <a href="https://@Model.Server/profile/@player.PlayerId" target="_blank">Show</a>
                    </td>
                    <td>
                        @Html.DisplayFor(m => player.PlayerName)
                    </td>
                    <td>
                        @Html.DisplayFor(m => player.AllianceName)
                    </td>
                    <td>
                        @Html.DisplayFor(m => player.Tribe)
                    </td>
                    <td>
                        @Html.DisplayFor(m => player.VillageCount)
                    </td>

                    @for (var i = 0; i < Model.Dates.Count; i++)
                    {
                        <td>
                            @if (i >= player.Population.Count()){
                                <p>~</p>
                            }
                            else
                            {
                                <p>
                                    @Html.DisplayFor(m => player.Population[i])

                                    @if (i == player.Population.Count() - 1) continue;
                                    [ @(player.Population[i] - player.Population[i + 1]) ]
                                </p>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
@using (Html.BeginForm())
{
    <div id="container" style="margin-left: 20px">
        <p></p>
        <p></p>
        <div class="pagination" style="margin-left: 400px">
            Page @(Model.Players.PageCount < Model.Players.PageNumber ? 0 : Model.Players.PageNumber)
            of @Model.Players.PageCount  
            @Html.PagedListPager(Model.Players, page => {
                Model.Input.PageNumber = page;
                return Url.Action("Index", Model.Input );
            }, Bootstrap4PagedListRenderOptions.ClassicPlusFirstAndLast)
        </div>
    </div>
}